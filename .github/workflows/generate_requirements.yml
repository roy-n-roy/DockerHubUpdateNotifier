name: Generate requirements.txt

on:
  push:
    tags: 
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Git config
      run: |
        git config --global user.name "github-actions"
        git config --global user.email actions@github.com

    - name: Install Pipenv
      run: |
        python -m pip install -U pip
        pip install pipenv

    - name: Get Version
      run: echo ::set-env name=VERSION::${GITHUB_REF/refs\/tags\/v/}

    - name: Get Sentry-CLI tool
      run: |
        export INSTALL_DIR=.
        curl -sL https://sentry.io/get-cli/ | bash

    - name: Create release to Sentry
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      run: |
        ./sentry-cli releases new -p dockerhubupdatenotifier "v${VERSION}"
        ./sentry-cli releases set-commits --auto "v${VERSION}"

    - name: Genetate and commit requirements.txt
      run: |
        git checkout -B release
        echo "__version__ = 'v${VERSION}'" > ${{ github.workspace }}/django/config/__init__.py
        pipenv lock --requirements > ${{ github.workspace }}/requirements.txt
        cd ${{ github.workspace }}/production
        pipenv lock --requirements >> ${{ github.workspace }}/requirements.txt
        cd ${{ github.workspace }}
        git add requirements.txt django/config/__init__.py
        git commit -m "release ${VERSION}"
        git log -1 release-${VERSION} && git tag -d release-${VERSION}
        git ls-remote --exit-code origin release-${VERSION} && git push -d origin release-${VERSION}
        git tag release-${VERSION}
        git push origin release-${VERSION}

    - name: Finalize release of Sentry
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      run: |
        ./sentry-cli releases finalize "v${VERSION}"

    - name: Delete release of Sentry
      if: failure()
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      run: |
        ./sentry-cli releases delete "v${VERSION}"

    - name: Notify Slack
      if: always()
      uses: pioug/le-slack-message@v1.0.0
      with:
        ACTION_NAME: Build Docker Image@roy-n-roy/DockerHubUpdateNotifier
        JOB: ${{ toJson(job) }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
